IMPORTS {
import bank.UserInterface;
import bank.Account;
}

GLOBAL {

VARIABLES { 
 int aux = -1 ; 
}

ACTEVENTS { ch }

TRIGGERS {
deposit_en(int money) = {UserInterface f.deposit(money)entry}
deposit_ex(int money) = {UserInterface f.deposit(money)exit()}
withdraw_en(int money) = {UserInterface f.withdraw(money)entry}
withdraw_ex(int money) = {UserInterface f.withdraw(money)exit()}
}

PROPERTY prop_args_integrity {

STATES
{
STARTING { init ; }
BAD { bad ; }
NORMAL { idle ; }
}

TRANSITIONS
{
init -> idle [withdraw_en \ money > 0 \ aux = money ; \create(args_integrity, f.getUser().getAccount() ,withdraw) ; ]
init -> idle [deposit_en \ money > 0 \ aux = money ; \create(args_integrity, f.getUser().getAccount() ,deposit) ; ]
idle -> init [ch?]
idle -> init [ch?] 
idle -> bad [withdraw_ex]
idle -> bad [deposit_ex]
}

} %%end prop_deposit

} %%end GLOBAL

TEMPLATES {

TEMPLATE args_integrity (Account acc, MethodName m) {

  TRIGGERS { m_en(int money) = { acc.m(money)entry } }
  
  PROPERTY check_args_integrity {
   STATES {
    STARTING { idle ; }
    ACCEPTING { ok ; }
    BAD { bad ; }
   }

   TRANSITIONS {
     idle -> ok [ m_en \ money == aux \ aux = -1 ; \gen(ch) ; ]
     idle -> bad [ m_en \ money != aux ]
   }
  } %%end prop_deposit

} %%end check_args_integrity

} %%end TEMPLATES
